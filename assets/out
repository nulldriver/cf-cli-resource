#!/bin/bash
# vim: set ft=sh

set -eu
set -o pipefail

exec 3>&1 # make stdout available as fd 3 for the result
exec 1>&2 # redirect all output to stderr for logging

source $(dirname $0)/cf-functions.sh

working_dir=${1:-}

if [ -z "$working_dir" ]; then
  printf '\e[91m[ERROR]\e[0m usage: %s <path/to/source>\n' "$0"
  exit 1
fi

# for jq
PATH=/usr/local/bin:$PATH

TMPDIR=${TMPDIR:-/tmp}
payload=$(mktemp $TMPDIR/cf-cli-resource-request.XXXXXX)

cat > $payload <&0

debug=$(jq -r '.source.debug //empty' < $payload)
if [ "$debug" = "true" ]; then
  set -x
fi

api=$(jq -r '.source.api //empty' < $payload)
skip_cert_check=$(jq -r '.source.skip_cert_check //false' < $payload)
username=$(jq -r '.source.username //empty' < $payload)
password=$(jq -r '.source.password //empty' < $payload)
source_org=$(jq -r '.source.org //empty' < $payload)
source_space=$(jq -r '.source.space //empty' < $payload)
params=$(jq -r '.params //empty' < $payload)

cf_color=$(jq -r '.source.cf_color //empty' < $payload) && [ -n "$cf_color" ] && export CF_COLOR=$cf_color
cf_dial_timeout=$(jq -r '.source.cf_dial_timeout //empty' < $payload) && [ -n "$cf_dial_timeout" ] && export CF_DIAL_TIMEOUT=$cf_dial_timeout
cf_trace=$(jq -r '.source.cf_trace //empty' < $payload) && [ -n "$cf_trace" ] && export CF_TRACE=$cf_trace

if [ -z "$api" ]; then
  printf '\e[91m[ERROR]\e[0m invalid payload (missing api)\n'
  exit 1
fi

if [ -z "$username" ]; then
  printf '\e[91m[ERROR]\e[0m invalid payload (missing username)\n'
  exit 1
fi

if [ -z "$password" ]; then
  printf '\e[91m[ERROR]\e[0m invalid payload (missing password)\n'
  exit 1
fi

cd $working_dir

printf '\e[92m[INFO]\e[0m %s\n' "$(cf --version)"

cf_logged_in=false

# convert the single command into a single element array
if echo $params | jq -e 'has("command")' >/dev/null; then
  params=$(jq -n --argjson params "$params" '{commands: [ $params ] }')
fi

echo "$params" | jq -c '.commands[]' | while read -r options; do

  command=$(echo $options | jq -r '.command')

  # Backup the old values so we can reset at the end of the loop
  OLD_CF_COLOR=$CF_COLOR
  OLD_CF_DIAL_TIMEOUT=$CF_DIAL_TIMEOUT
  OLD_CF_TRACE=$CF_TRACE

  # Override source values if set in params
  cf_color=$(echo $options | jq -r '.cf_color //empty') && [ -n "$cf_color" ] && export CF_COLOR=$cf_color
  cf_dial_timeout=$(echo $options | jq -r '.cf_dial_timeout //empty') && [ -n "$cf_dial_timeout" ] && export CF_DIAL_TIMEOUT=$cf_dial_timeout
  cf_trace=$(echo $options | jq -r '.cf_trace //empty') && [ -n "$cf_trace" ] && export CF_TRACE=$cf_trace
  org=$(echo $options | jq -r '.org //empty') && [ -z "$org" ] && org=$source_org
  space=$(echo $options | jq -r '.space //empty') && [ -z "$space" ] && space=$source_space

  if ! $cf_logged_in; then
    cf_login $api "$username" "$password" $skip_cert_check
    cf_logged_in=true
  fi

  if [ "create-org" = "$command" ]; then
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$org"
    cf_create_org "$org"
  elif [ "delete-org" = "$command" ]; then
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$org"
    cf_delete_org "$org"
  elif [ "create-space" = "$command" ]; then
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$space"
    cf_create_space "$org" "$space"
  elif [ "delete-space" = "$command" ]; then
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$space"
    cf_delete_space "$org" "$space"
  elif [ "create-user" = "$command" ]; then
    username=$(echo $options | jq -r '.username //empty')
    password=$(echo $options | jq -r '.password //empty')
    origin=$(echo $options | jq -r '.origin //empty')
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$username"
    if [ -n "$password" ]; then
      cf_create_user_with_password "$username" "$password"
    elif [ -n "$origin" ]; then
      cf_create_user_with_origin "$username" "$origin"
    else
      printf '\e[91m[ERROR]\e[0m Invalid config: Must specify password or origin\n'
    fi
  elif [ "create-users-from-file" = "$command" ]; then
    file=$(echo $options | jq -r '.file //empty')
    cf_create_users_from_file "$file"
  elif [ "delete-user" = "$command" ]; then
    username=$(echo $options | jq -r '.username //empty')
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$username"
    cf_delete_user "$username"
  elif [ "create-user-provided-service" = "$command" ]; then
    service_instance=$(echo $options | jq -r '.service_instance //empty')
    credentials=$(echo $options | jq -r '.credentials //empty')
    syslog_drain_url=$(echo $options | jq -r '.syslog_drain_url //empty')
    route_service_url=$(echo $options | jq -r '.route_service_url //empty')
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$service_instance"
    cf_target "$org" "$space"

    if cf_user_provided_service_exists "$service_instance"; then
      printf '\e[92m[INFO]\e[0m \e[95mService %s already exists\e[0m\n' "$service_instance"
    else
      if [ -n "$credentials" ]; then
        cf_create_user_provided_service_credentials "$service_instance" "$credentials"
      elif [ -n "$syslog_drain_url" ]; then
        cf_create_user_provided_service_syslog "$service_instance" "$syslog_drain_url"
      elif [ -n "$route_service_url" ]; then
        cf_create_user_provided_service_route "$service_instance" "$route_service_url"
      fi
    fi
  elif [ "create-service" = "$command" ]; then
    service=$(echo $options | jq -r '.service //empty')
    plan=$(echo $options | jq -r '.plan //empty')
    service_instance=$(echo $options | jq -r '.service_instance //empty')
    configuration=$(echo $options | jq -r '.configuration //"{}"')
    tags=$(echo $options | jq -r '.tags //empty')
    timeout=$(echo $options | jq -r '.timeout //empty')
    wait=$(echo $options | jq -r '.wait_for_service //"false"')
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$service_instance"
    cf_target "$org" "$space"
    cf_create_service "$service" "$plan" "$service_instance" "$configuration" "$tags"
    if [ "true" = "$wait" ]; then
      cf_wait_for_service_instance "$service_instance" "$timeout"
    fi
  elif [ "wait-for-service" = "$command" ]; then
    service_instance=$(echo $options | jq -r '.service_instance //empty')
    timeout=$(echo $options | jq -r '.timeout //empty')
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$service_instance"
    cf_target "$org" "$space"
    cf_wait_for_service_instance "$service_instance" "$timeout"
  elif [ "delete-service" = "$command" ]; then
    service_instance=$(echo $options | jq -r '.service_instance //empty')
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$service_instance"
    cf_target "$org" "$space"
    cf_delete_service "$service_instance"
  elif [ "push" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    hostname=$(echo $options | jq -r '.hostname //empty')
    memory=$(echo $options | jq -r '.memory //empty')
    disk_quota=$(echo $options | jq -r '.disk_quota //empty')
    instances=$(echo $options | jq -r '.instances //empty')
    path=$(echo $options | jq -r '.path //empty')
    buildpack=$(echo $options | jq -r '.buildpack //empty')
    no_start=$(echo $options | jq -r '.no_start //empty')
    manifest=$(echo $options | jq -r '.manifest //empty')

    args=
    [ -n "$app_name" ]   && args="$args $app_name"
    [ -n "$hostname" ]   && args="$args -n $hostname"
    [ -n "$memory" ]     && args="$args -m $memory"
    [ -n "$disk_quota" ] && args="$args -k $disk_quota"
    [ -n "$instances" ]  && args="$args -i $instances"
    [ -n "$path" ]       && args="$args -p $path"
    [ -n "$buildpack" ]  && args="$args -b $buildpack"
    [ -n "$manifest" ]   && args="$args -f $manifest"
    [ -n "$no_start" ]   && args="$args --no-start"

    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$app_name"
    cf_target "$org" "$space"
    cf_push "$args"
  elif [ "zero-downtime-push" = "$command" ]; then
    manifest=$(echo $options | jq -r '.manifest //empty')
    path=$(echo $options | jq -r '.path //empty')
    current_app_name=$(echo $options | jq -r '.current_app_name //empty')
    environment_variables=$(echo $options | jq -r '.environment_variables //empty')

    if [ ! -f "$manifest" ]; then
      printf '\e[91m[ERROR]\e[0m invalid payload (manifest is not a file: %s)\n' "$manifest"
      exit 1
    fi

    instructions="$(dirname $manifest)/.cf-cli-resource-manifest-update-instructions.yml"

    # add pipeline defined environment variables to the manifest
    for key in $(echo $environment_variables | jq -r 'keys[]');
    do
      value=$(echo $environment_variables | jq -r --arg key "$key" '.[$key]')
      # valid inline yaml (flow style) so quote the value if it starts with a sequence or map
      if [[ "$value" == [* || "$value" == {* ]]; then
        echo "env.$key: '$value'" >>"$instructions"
      else
        echo "env.$key: $value" >>"$instructions"
      fi
    done

    if [ -f "$instructions" ]; then
      mv "$manifest" "$manifest.original"
      yaml w -s "$instructions" "$manifest.original" > "$manifest"
    fi

    args="-f $manifest"
    [ -n "$path" ] && args="$args -p $path"

    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$current_app_name"
    cf_target "$org" "$space"
    cf_zero_downtime_push "$args" "$current_app_name"
  elif [ "start" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    staging_timeout=$(echo $options | jq -r '.staging_timeout //"0"')
    startup_timeout=$(echo $options | jq -r '.startup_timeout //"0"')
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$app_name"
    cf_target "$org" "$space"
    cf_start "$app_name" "$staging_timeout" "$startup_timeout"
  elif [ "delete" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    delete_mapped_routes=$(echo $options | jq -r '.delete_mapped_routes //empty')
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$app_name"
    cf_target "$org" "$space"
    cf_delete "$app_name" "$delete_mapped_routes"
  elif [ "run-task" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    task=$(echo $options | jq -r '.task //"0"')
    task_name=$(echo $options | jq -r '.task_name //"0"')
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$app_name" "$task" "$task_name"
    cf_target "$org" "$space"
    cf_run_task $app_name "$task" $task_name
  elif [ "bind-service" = "$command" ]; then
    app_name=$(echo $options | jq -r '.app_name //empty')
    service_instance=$(echo $options | jq -r '.service_instance //empty')
    configuration=$(echo $options | jq -r '.configuration // "{}" //empty')
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$app_name"
    cf_target "$org" "$space"
    cf_bind_service "$app_name" "$service_instance" "$configuration"
  elif [ "create-service-broker" = "$command" ]; then
    service_broker=$(echo $options | jq -r '.service_broker //empty')
    username=$(echo $options | jq -r '.username //empty')
    password=$(echo $options | jq -r '.password //empty')
    url=$(echo $options | jq -r '.url //empty')
    is_space_scoped=$(echo $options | jq -r '.space_scoped //"false"')
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$service_broker"
    cf_target "$org" "$space"
    cf_create_service_broker "$service_broker" "$username" "$password" "$url" "$is_space_scoped"
  elif [ "enable-service-access" = "$command" ]; then
    service_broker=$(echo $options | jq -r '.service_broker //empty')
    plan=$(echo $options | jq -r '.plan //""')
    access_org=$(echo $options | jq -r '.access_org //""')
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$service_broker"
    cf_target "$org" "$space"
    cf_enable_service_access "$service_broker" "$plan" "$access_org"
  elif [ "disable-service-access" = "$command" ]; then
    service_broker=$(echo $options | jq -r '.service_broker //empty')
    plan=$(echo $options | jq -r '.plan //""')
    access_org=$(echo $options | jq -r '.access_org //""')
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$service_broker"
    cf_target "$org" "$space"
    cf_disable_service_access "$service_broker" "$plan" "$access_org"
  elif [ "delete-service-broker" = "$command" ]; then
    service_broker=$(echo $options | jq -r '.service_broker //empty')
    printf '\e[92m[INFO]\e[0m Executing \e[33m%s\e[0m: %s\n' "$command" "$service_broker"
    cf_target "$org" "$space"
    cf_delete_service_broker "$service_broker"
  else
    printf '\e[91m[ERROR]\e[0m invalid payload (unknown command: %s)\n' "$command"
    exit 1
  fi

  # Reset back to the old values for the next iteration
  CF_COLOR=$OLD_CF_COLOR
  CF_DIAL_TIMEOUT=$OLD_CF_DIAL_TIMEOUT
  CF_TRACE=$OLD_CF_TRACE

done

# todo: metadata
jq -n \
--arg timestamp $(date +%s) \
'{
  version: {
    timestamp: $timestamp
  }
}' >&3
